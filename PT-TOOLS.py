import os
import signal
import time

def sigint_handler(signum, frame):
    print("Ctrl+C presionado, cerrando programa...")
    exit(0)

signal.signal(signal.SIGINT, sigint_handler)

os.system ("clear")
os.system ("toilet -f term -F border:metal Pentester-Tool by kidd3n")

def mostrar_menu(opciones):
    print('Seleccione una opción:')
    for clave in sorted(opciones):
        print(f' {clave}) {opciones[clave][0]}')


def leer_opcion(opciones):
    while (a := input('Opción: ')) not in opciones:
        print('Opcion no encontrada')
    return a


def ejecutar_opcion(opcion, opciones):
    opciones[opcion][1]()


def generar_menu(opciones, opcion_salida):
    opcion = None
    while opcion != opcion_salida:
        mostrar_menu(opciones)
        opcion = leer_opcion(opciones)
        ejecutar_opcion(opcion, opciones)
        print()


def menu_principal():
    opciones = {
        '1': ('Kali (Se actualizara y descargara herramientas adicionales de pentesting)', accion1),
        '2': ('Todas las herramientas de Pentesting', accion2),
        '3': ('Descarga Herramientas utiles para un usuario normal como LibreOffice, Chrome, etc.', accion3),
        '4': ('Salir', salir)
    }

    generar_menu(opciones, '4')


def accion1():
    os.system ("python3 Kali.py") 

def accion2():
     os.system ("python3 DebianPT.py")

def accion3():
     os.system ("python3 BasicTools.py")

def salir():
    print('Saliendo...')


if __name__ == '__main__':
    menu_principal()
   

